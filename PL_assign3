use std::alloc::System;
use std::ffi::{c_ushort, CString};
use std::fmt::Debug;
use std::ops::Index;
use std::pin::pin;
use std::str::Chars;
use rand::Rng;
#[derive(Debug, Clone)]
struct Rule {
    left_hand_side: char,
    right_hand_side: String,
}

impl Rule{
    fn new (left_hand_side: char, right_hand_side: &str) -> Rule {
        Rule {
            left_hand_side,
            right_hand_side: right_hand_side.to_string(),
        }
    }

    fn is_rule_valid(&self) -> bool {
        return self.left_hand_side.is_ascii_uppercase();
    }

    fn rule_is_right_regular(&self) -> bool {
        let mut count = 0;
        for chars in self.right_hand_side.chars() {
            count += 1;
            if chars.is_ascii_uppercase() && count == 0 {
                return true;
            } else {
                break;
            }
        }
        return false;
    }

    fn rule_is_left_regular(&self) -> bool {
        let mut count = 0;
        for chars in self.right_hand_side.chars() {
            count += 1;
            if chars.is_ascii_uppercase() && count == self.right_hand_side.len() {
                return true;
            } else {
                break;
            }
        }
        return false;
    }
}

#[derive(Debug, Clone)]
struct Grammar {
    start_symbol: char,
    non_terminals: String,
    terminals: String,
    rules: Vec<Rule>
}

impl Grammar{
    fn from_rules(rules: Vec<Rule>) -> Grammar{

        //populate grammar attribs
        let start_symbol = rules[0].left_hand_side.clone();
        println!("start symbol is {:}", start_symbol);

        let mut non_terminals:Vec<char> = Vec::new();
        for rule in rules.iter() {
            for character in rule.right_hand_side.chars() {
                if character.is_ascii_uppercase() {
                    non_terminals.push(character);
                }
            }
        }

        let mut terminals:Vec<char> = Vec::new();
        for rule in rules.iter() {
            for character in rule.right_hand_side.chars() {
                if character.is_ascii_lowercase() {
                    terminals.push(character);
                }
            }
        }
        let mut rules_vec:Vec<Rule> = rules.clone();

        return Grammar {
            start_symbol,
            non_terminals: "".to_string(),
            terminals: "".to_string(),
            rules,
        }
    }

    fn grammar_is_valid(&self) -> bool {

        //need to check production rules, terminals, non-terminals still?
        if self.start_symbol.is_ascii_uppercase() {
            return true;
        }
        return false;
    }

    //determine if grammar is type 3, all prod rules need to be right reg or left reg but not both
    //return t/f based on if grammmar is right reg/ left reg
    fn grammar_is_regular(&self) -> bool{
        for nt in self.non_terminals.chars() {
            let right_regular = self.rule_indxs_from_nt(nt).iter().filter(|&i| self.rules[*i].rule_is_right_regular()).count();
            let left_regular = self.rule_indxs_from_nt(nt).iter().filter(|&i| self.rules[*i].rule_is_left_regular()).count();

            if right_regular > 0 && left_regular < 0{
                return false;
            }
        }
        return true;
    }

    fn rule_indxs_from_nt(&self, non_terminal:char) -> Vec<usize> {
        let mut rule_indices = Vec::new();
        //println!("{}",self.rules.len());
        for (index, rule) in self.rules.iter().enumerate(){
            //println!("LHS {} comparing to NT {}................With index as {}", rule.left_hand_side, non_terminal, index);
            if rule.left_hand_side == non_terminal {
                //println!("Pushing index {}", index);
                rule_indices.push(index);
            }
        }
        return rule_indices;
    }
}

enum DerivationError {
    IncompleteSentential
}
#[derive(Debug, Clone)]
struct Sentential {
    sentential: String,
    first_nt_index: i32,
    no_more_nts_flag: bool
}

impl Sentential {
    fn new_initial(grammar: &Grammar) -> Sentential {
        return Sentential {
            sentential: grammar.start_symbol.to_string(),
            first_nt_index: -1,
            no_more_nts_flag: false
        }
    }

    fn new_next(&self, g:Grammar, index: usize, non_terminal: char) -> Sentential {
        let index_rule = g.rules.index(index);
        let rhs = &index_rule.right_hand_side;

        let new_string = self.sentential.replacen(non_terminal, &g.rules[index].right_hand_side, 1);
        //println!("Replacing nt {} with rhs: {}",non_terminal, &g.rules[index].right_hand_side);
        let mut leftmost_nt = '0';
        let symbols = &new_string;//g.rules.index(index).right_hand_side.chars();
        let mut left_nt_index = 0;

        let mut found_nt = false;
        for character in symbols.chars() {

            //check for terminal
            if character.is_ascii_uppercase() {
                leftmost_nt = character;
                found_nt = true;
                break;
            }
            left_nt_index += 1;

        }

        if !found_nt {
            left_nt_index = -1;
        }
        //add index and sentential result to step
        //self.steps.push((index as i32, new_sentential));

        return Sentential {
            sentential: new_string,
            first_nt_index: left_nt_index,
            no_more_nts_flag: !found_nt,
        }
    }

    fn is_complete(&self) -> bool{
        //a check for if empty
        if self.sentential.is_empty() {
            return true;
        }

        //check for non-terminal symbols
        for character in self.sentential.chars() {
            if character.is_ascii_uppercase() {
                //println!("{}", character);
                return false;
            }
        }
        return true;
    }
}


#[derive(Debug)]
struct Derivation {
    steps: Vec<(i32, Sentential)>,
    is_complete_flag: bool,
    word: Sentential,//String,
    no_nts_flag: bool
}

impl Derivation {

    fn new(g:Grammar) -> Derivation {
        let initial_sentential = Sentential::new_initial((&g));
        let steps = vec![(-1, initial_sentential.clone())];
        return Derivation {
            steps,
            is_complete_flag: false,
            word: initial_sentential.clone(),
            no_nts_flag : false
        }
    }

    //index is rule index
    fn derive_leftmost(&mut self, mut g: Grammar, index:usize){

        println!("{:?}", self.word);
        if self.is_complete(){
            //println!("No more nts");
            //return;
        }

        let left_nt = self.leftmost_nt();
        //println!("Leftmost term:::::::: {}",left_nt);
        let next = self.word.new_next(g, index, left_nt);
        self.word = next.clone();

        self.steps.push((index as i32, next));
    }

    fn is_complete(&self) -> bool{// -> Vec<(i32, Sentential)> {
        return self.no_nts_flag;
    }

    fn print_random( max_steps:u32) {
        let mut steps_left = max_steps;
        //rules
        let rule_set = vec! {
            Rule::new('A', "A-B"), //0
            Rule::new('A', "B"),   //1
            Rule::new('A', "!C"),  //2
            Rule::new('B', "B/C"), //3
            Rule::new('B', "C"),   //4
            Rule::new('C', "(B)"), //5
            Rule::new('C', "c")    //6
        };

        let grammar:Grammar = Grammar::from_rules(rule_set);
        let mut deriv = Derivation::new(grammar.clone());

        //probabilities of rules
        let mut nt = 'A';


        //derive until we hit max num of steps

        let mut rng = rand::thread_rng();
        while steps_left > 0 {
            //println!("Sentential is currently {}", deriv.word.sentential);

            if deriv.is_complete() {
                break;
            }

            let rule_list = grammar.rule_indxs_from_nt(nt);
            let rand_num = rng.gen_range(0..rule_list.len());
            deriv.derive_leftmost(grammar.clone(), rule_list[rand_num]);
            steps_left -= 1;

            nt = deriv.leftmost_nt();
        }
        println!("Steps left {}", steps_left);
        println!("Did it complete? {}", deriv.is_complete());
        println!("Results {}", deriv.word.sentential);
    }

    fn word(&self) -> &Sentential {
        return &self.word;
    }

    fn leftmost_nt(&mut self) -> char{
        let mut leftmost_nt = '0';
        let symbols = self.word.clone();
        self.no_nts_flag = true;
        for character in symbols.sentential.chars() {
            //check for terminal
            if character.is_ascii_uppercase() {
                leftmost_nt = character;
                self.no_nts_flag = false;
                break;
            }
        }

        return leftmost_nt;
    }
}
fn example_manual () {
    //want result of !c-(c/c)
    let rule_set_2 = vec! {
        Rule::new('A', "A-B"), //0
        Rule::new('A', "B"),   //1
        Rule::new('A', "!C"),  //2
        Rule::new('B', "B/C"), //3
        Rule::new('B', "C"),   //4
        Rule::new('C', "(B)"), //5
        Rule::new('C', "c")    //6
    };


    let grammar2:Grammar = Grammar::from_rules(rule_set_2);

    println!("grammar valid= {:}", grammar2.grammar_is_valid());
    println!("grammar regular= {:}", grammar2.grammar_is_regular());

    let mut deriv2 = Derivation::new(grammar2.clone());


    deriv2.derive_leftmost(grammar2.clone(), 0); //A
    deriv2.derive_leftmost(grammar2.clone(), 2); //A-B
    deriv2.derive_leftmost(grammar2.clone(), 6);
    deriv2.derive_leftmost(grammar2.clone(), 4); //
    deriv2.derive_leftmost(grammar2.clone(), 5); //
    deriv2.derive_leftmost(grammar2.clone(), 3); //
    deriv2.derive_leftmost(grammar2.clone(), 4); //
    deriv2.derive_leftmost(grammar2.clone(), 6); //
    deriv2.derive_leftmost(grammar2.clone(), 6); //
    deriv2.derive_leftmost(grammar2.clone(), 6);

    println!("derivation complete {:?}", deriv2.is_complete());
    println!("derivation word {:?}",deriv2.word());//.unwrap());

}

fn main() {
    example_manual();
    Derivation::print_random(20);
}
