SortAndCombine {

	make ArrayQueue <integer>, add integers to it from user inputs
	
ArrayQueue <Integer> intUserInputs = new ArrayQueue <Integer>();

//Scanner input
//ask for input
while(isFinished){
intUserInputs = input.nextInt();
//ask if they want to stop
int totalInputs_1 ++;
}

second idea is to use String Tokenizer

	make a second ArrayQueue<Integer>, add integers to it from user input
//just do the same thing as the first one
//have int totqlInputs_2 increment in same place

	put the items in intUserInputs into an array, they should be sorted low ints to high ints
new int[] array of the same size as totalInputs_1
load inputs through a for loop
something like for(int i = 0; i < newArray.length -1; i++) {
			newArray[i] = intUserInputs_1.dedqueue();
			//have some way of sorting the values as they are indexed
}


//repeat for second ArrayQueue

	Enqueue thru a for loop the indexes, assigning them to intUserInputs_1
for(int i = 0; i < newArray.length -1; i++) {

			intUserInputs_1.enqueue(newArray[i]);
}

//pretty much same thing for secondArrayQueue


----------------------------------------------------------------------------------------
Sort idea 1
Sort tokens as they are enqueued
----------------------------------------------------------------------------------------
2,3,4

I want to put 1 into queue
1 < 2, so enqueue

1,2,3,4
I want to put 5 into queue
5 > 1, so dequeue to temp[]
5 > 2, so dequeue to temp[]
5 > 3, so dequeue to temp[]
5 > 4, so dequeue to temp[]
enqueue 5

for (int i = 0; i != highestNum; i++) {
	
	//if x is greater/equal than the number before it, put it after that number
	//issue is that it needs to keep checking until the next number is null or is less than x
	if (x > queue.getFront()){

		intList[i] = queue.dequeue();
		++count;
	}
	else if( queue.getFront == null || x == queue.getFront()){
		queue.enqueue(x);
		for(int i = 0; i < count; i++) {
			queue.enqueue(intList[j]);
		}
	}

	//if x is less than the number before it, enqueue normally
	else {

		queue.enqueue(x);
	}

----------------------------------------------------------------------------------------
Sort idea 2
assign/enqueue tokens to queue 
now sort them
----------------------------------------------------------------------------------------
1,4,2,3
enqueue (1)
++queueLength 
enqueue (4)
++queueLength 
enqueue (2)
++queueLength 
enqueue (3)
++queueLength 

//sort
//I want to shuffle the values around though dequeueing to temp variables, maybe into an array or temp queue, and then reassign them.
//so something like...
	
	tempQueue = queue.dequeue; //x3 times (1,4,2)
	
	//tempQueue holds 2,4,1
	//I want to compare the front of tempQueue to the front of queue
	//if tQ >= q, I know that q should be listed before tQ.
	//I want this to just be accomplished here

	if(tempQueue.getFront() >= queue.getFront()) {
		
		//hold front of queue
		new temp = queue.dequeue();

		//move larger value in first
		queue.enqueue(tempQueue.dequeue());
		
		//now readd smaller value
		queue.enqueue(newTemp);
	}
		

(for int i = 0; i < queueLength; i++){
	
	
